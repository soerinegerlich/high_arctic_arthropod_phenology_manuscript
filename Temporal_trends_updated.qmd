---
title: "Temporal trends in high-arctic arthropod phenology"
author: "Hannah SÃ¸rine Gerlich"
format: html
editor: visual
---

Author contact information:

Email: soger\@ecos.au.dk

**Update**: The analysis of temporal trends of high-Arctic arthropods at Zackenberg has been update on 14th of April 2024.

## Analyzing temporal trends in high-arctic arthropod phenological events

This file contains all the code necessary to perform linear mixed modelling on the temporal trends of arthropod phenological events.

Initially, we have to load all relevant libraries.

```{r}
#| echo: false
#| message: false
#| warning: false
 
pkgs <-
  c(
    "tidyverse",
    "readxl",
    "corrplot",
    "stats",
    "ggpubr",
    "lme4",
    "car",
    "lmerTest",
    "gtsummary",
    "broom.mixed"
  )  

vapply(
    pkgs,
    library,
    FUN.VALUE = logical(1L),
    character.only = TRUE,
    logical.return = TRUE
  ) 
```

Then read the dataset called phenology_metrics.csv

```{r}
#| message: false
#| warning: false
#| output: false

df_phenology <-
  read.csv(
    "Data/phenology_data/phenology_metrics.csv",
    sep = ",",
    stringsAsFactors = FALSE,
    header = TRUE
  )
```

The dataset is missing information on functional groups and we therefore have to add this. The column is called **order**. The dataset also includes phenology metrics for Acari and Collembola in Plot 1, but this is a window trap and we don't consider these traps relevant for sampling soil organisms. Therefore remove this. We also remove Scathophagidae because we don't have a sufficient number of years for this family.

```{r}
#| message: false
#| warning: false
#| output: false

df_phenology <-
  subset(df_phenology, df_phenology$SpeciesID != "Scathophagidae")

df_phenology %>%   mutate(
  Order = case_when(
    SpeciesID == "Acari" ~ "Decomposer",
    SpeciesID == "ANMU" ~ "Mixed feeder",
    SpeciesID == "Aphidoidea" ~ "Herbivor",
    SpeciesID == "Chalcidoidea" ~ "Parasitoid",
    SpeciesID == "CHCE" ~ "Mixed feeder",
    SpeciesID == "Coccoidea" ~ "Herbivor",
    SpeciesID == "Collembola" ~ "Decomposer",
    SpeciesID == "Culicidae" ~ "Mixed feeder",
    SpeciesID == "Ichneumonidae" ~ "Parasitoid",
    SpeciesID == "Linyphiidae" ~ "Predator",
    SpeciesID == "Lycosidae" ~ "Predator",
    SpeciesID == "MYSC" ~ "Mixed feeder",
    SpeciesID == "Nymphalidae" ~ "Mixed feeder",
    SpeciesID == "Phoridae" ~ "Mixed feeder",
    SpeciesID == "Thomisidae" ~ "Predator"
  )
) -> df_phenology   

df_phenology$Order[is.na(df_phenology$Order)] <- "NA"
df_phenology<- subset(df_phenology,Order!="NA")

df_phenology <-
  subset(df_phenology,
         df_phenology$Plot != "Art1" |
           df_phenology$SpeciesID != "Collembola") 

df_phenology <-
  subset(df_phenology,
         df_phenology$Plot != "Art1" |
           df_phenology$SpeciesID != "Acari") 

df_phenology <-
  subset(df_phenology, Plot != "Art6")

df_phenology$speciesplot <-
  as.factor(paste(df_phenology$SpeciesID, df_phenology$Plot))

df_phenology$Onset[is.na(df_phenology$Onset)] <- "NA"
df_phenology <- subset(df_phenology, Onset != "NA")

df_phenology$Onset <- as.numeric(df_phenology$Onset)
df_phenology$Peak <- as.numeric(df_phenology$Peak)
df_phenology$End <- as.numeric(df_phenology$End)
df_phenology$Duration <- as.numeric(df_phenology$Duration)

df_phenology %>%
  mutate(
    Habitat = case_when(
      Plot == "Art1" ~ "Pond",
      Plot == "Art2" ~ "Wet fen",
      Plot == "Art3" ~ "Mesic heath",
      Plot == "Art4" ~ "Mesic heath",
      Plot == "Art5" ~ "Arid heath",
      Plot == "Art7" ~ "Arid heath"
    )
  ) -> df_phenology

```

## Community temporal trends

The first test is a linear mixed modelling approach for the whole arthropod community (all family-by-plot combinations) across all three phenology events.

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

m.1.1 <- lmer(Onset ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order), data=df_phenology)
#summary(m.2)

m.1.2 <- lmer(Onset ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) + (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)

AIC(m.1.1, m.1.2)

m.2.1 <- lmer(Peak ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order), data=df_phenology)
#summary(m.2)

m.2.2 <- lmer(Peak ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) + 
                (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)

AIC(m.2.1, m.2.2)

m.3.1 <- lmer(End ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order), data=df_phenology)
#summary(m.2)

m.3.2 <- lmer(End ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) + (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)

AIC(m.3.1, m.3.2)

m.4.1 <- lmer(Duration ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order), data=df_phenology)
#summary(m.2)

m.4.2 <- lmer(Duration ~ Year + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) + (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)

AIC(m.4.1, m.4.2)
```

Full model producing results on the fixed effect of year and the variance of each random effect:

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

m.1 <- lmer(Onset ~ Year + (1 | Plot) + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) +
               (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)
summary(m.1)

m.2 <- lmer(Peak ~ Year + (1 | Plot) + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) +
            (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)
summary(m.2)

m.3 <- lmer(End ~ Year + (1 | Plot) + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order) +
            (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)
summary(m.3)

m.4 <- lmer(Duration ~ Year + (1 | Plot) + (1 + Year | SpeciesID) + (1 + Year | Habitat) + (1 + Year | Order)+
            (1 + Year | SpeciesID:Habitat) + (1 + Year | SpeciesID:Order), data=df_phenology)
summary(m.4)

```

```{r fig.height=9,fig.width=6}
#| echo: false
#| message: false
#| warning: false

m.2.fixed <- lm(Peak ~ Year*SpeciesID*Habitat , data=df_phenology)
#plot(m.2.fixed)
#qqnorm(resid(m.2))

#Visualise
(mm.2_plot <- ggplot(df_phenology, aes(x = Year, y = Peak, colour = SpeciesID)) +
      facet_wrap(~ Habitat, nrow=2) +   # a panel for each mountain range
      geom_point(alpha = 0.5) +
      ylab("Peak activity (Day of Year)") +
      theme_classic() +
      scale_color_viridis_d(option = "plasma") +
      geom_line(data = cbind(df_phenology, pred = predict(m.2.fixed)), aes(y = pred), linewidth = 1) +  # adding predicted line from mixed model 
      theme(legend.position = "none",
            panel.spacing = unit(2, "lines"),
            axis.text.x = element_text(angle = 35, vjust = 0.8))  # adding space between panels
)

m.4.fixed <- lm(Duration ~ Year*SpeciesID*Habitat , data=df_phenology)

#Visualise
(mm.4_plot <- ggplot(df_phenology, aes(x = Year, y = Duration, colour = SpeciesID)) +
      facet_wrap(~ Habitat, nrow=2) +   # a panel for each mountain range
      geom_point(alpha = 0.5) +
      ylab("Duration of activity (No. of Days)") +
      theme_classic() +
      scale_color_viridis_d(option = "plasma") +
      geom_line(data = cbind(df_phenology, pred = predict(m.4.fixed)), aes(y = pred), linewidth = 1) +  # adding predicted line from mixed model 
      theme(legend.position = "bottom",
            panel.spacing = unit(2, "lines"),
            axis.text.x = element_text(angle = 35, vjust = 0.8))  # adding space between panels
)
```

```{r}
#| message: false
#| warning: false
#| output: false
#| echo: false

#Visualize community trends
peak <- ggplot(df_phenology, aes(x = Year, y = Peak)) +
     #facet_wrap(~ Habitat, nrow=2) +   # a panel for each mountain range
     geom_point(alpha = 0.5) +
     ylab("Peak activity (Day of Year)") +
     theme_classic() +
     scale_color_viridis_d(option = "plasma") +
     geom_smooth(se = FALSE, method = "lm", linewidth = 2) +
     theme(legend.position = "none",
           axis.title.y = element_text(vjust = 2, size = 14),
           axis.title.x = element_text(vjust = 0.8, size = 14),
           axis.text.y = element_text(hjust = 0.5, size = 12),
           axis.text.x = element_text(angle = 35, vjust = 0.5, size = 12),
           plot.margin = margin(10,1,10,0.5, "cm"))

duration <- ggplot(df_phenology, aes(x = Year, y = Duration)) +
     #facet_wrap(~ Habitat, nrow=2) +   # a panel for each mountain range
     geom_point(alpha = 0.5) +
     ylab("Duration of activity (No. of days)") +
     theme_classic() +
     scale_color_viridis_d(option = "plasma") +
     geom_smooth(se = FALSE, method = "lm", linetype = "dashed", linewidth = 2) +
     theme(legend.position = "none",
           axis.title.y = element_text(vjust = 2, size = 14),
           axis.title.x = element_text(vjust = 0.8, size = 14),
           axis.text.y = element_text(hjust = 0.5, size = 12),
           axis.text.x = element_text(angle = 35, vjust = 0.5, size = 12),
           plot.margin = margin(10,0.5,10,1, "cm"))

ggarrange(peak, duration)
```

\newpage

Tables with output from linear mixed models.

```{r}
#| echo: false
#| message: false
#| warning: false

tbl_regression(m.1) %>%
  modify_column_unhide(column = std.error) %>%
  modify_caption("**Onset of arthropod community**")
tbl_regression(m.2)%>%
  modify_column_unhide(column = std.error) %>%
  modify_caption("**Peak of arthropod community**")
tbl_regression(m.3)%>%
  modify_column_unhide(column = std.error) %>%
  modify_caption("**End of arthropod community**")
tbl_regression(m.4)%>%
  modify_column_unhide(column = std.error) %>%
  modify_caption("**Duration of arthropod community**")
```

\newpage

Table with amount of variance explained by each random variable:

**Table S** Variance explained by random effects (Species, habitat and functional group) included in the linear mixed model.

|                        |           |             |                      |                   |                            |
|------------------------|-----------|-------------|----------------------|-------------------|----------------------------|
| **Random component**   |           |             | **Variance**         |                   |                            |
| **Phenological event** | **Taxon** | **Habitat** | **Functional group** | **Taxon:Habitat** | **Taxon:Functional group** |
| **Onset**              | 10%       | 40%         | 21%                  | 26%               | 8%                         |
| **Peak**               | 18%       | 27%         | 16%                  | 16%               | 18%                        |
| **End**                | 15%       | 22%         | 12%                  | 16%               | 14%                        |
| **Duration**           | 17%       | 25%         | 18%                  | 17%               | 17%                        |

## Temporal trend of all family-by-plot combinations for each phenological event

The below code loops through all family and plot in the dataset and performs simple linear regression. All summary information from the linear models is gathered in a data frame.

```{r}
#| message: false
#| warning: false
#| output: false

df_summary_lm <-
  data.frame(
    SpeciesID = character(),
    Plot = character(),
    Pheno_event = character(),
    Slope = numeric(),
    SE = numeric(),
    Tvalue = numeric(),
    Pvalue = numeric(),
    Rsquare = numeric(),
    AdjRsquare = numeric(),
    Count = numeric(),
    n = numeric(),
    Residual = numeric()
  )

for (i in unique(df_phenology$SpeciesID)){
  print(i)
  df8b<-subset(df_phenology,SpeciesID==i)
  for (j in unique(df8b$Plot)){
    df8a<-subset(df8b,Plot==j)
    
    if(sum(!is.na(df8a$Onset))<6){ 
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1], 
                          Plot=df8a$Plot[1],
                          Pheno_event="Onset",
                          Slope=NA,
                          SE=NA,
                          Tvalue=NA,
                          Pvalue=NA,
                          Rsquare=NA,
                          AdjRsquare=NA,
                          Count=NA,
                          n=NA,
                          Residual=NA)
    }
    else{
      mod1 <- lm(Onset ~ Year, data =df8a)       
      Residual1 <- sqrt(deviance(mod1)/df.residual(mod1))
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1], 
                          Plot=df8a$Plot[1],
                          Pheno_event="Onset",
                          Slope=summary(mod1)$coefficients[2],
                          SE=summary(mod1)$coefficients[4],
                          Tvalue=summary(mod1)$coefficients[6],
                          Pvalue=summary(mod1)$coefficients[8],
                          Rsquare=summary(mod1)$r.squared,
                          AdjRsquare=summary(mod1)$adj.r.squared,
                          Count=sum(df8a$TotalAbundance),
                          n=sum(!is.na(df8a$Onset)),
                          Residual=Residual1)
      df_summary_lm<-bind_rows(df_summary_lm,df_temp)
    }
    #plot(mod1)
    
    
    if(sum(!is.na(df8a$Peak))<6){
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="Peak",
                          Slope=NA,
                          SE=NA,
                          Tvalue=NA,
                          Pvalue=NA,
                          Rsquare=NA,
                          AdjRsquare=NA,
                          Count=NA,
                          n=NA,
                          Residual=NA)
    }
    
    else{ 
      mod2 <- lm(Peak ~ Year, data =df8a)
      Residual2 <- sqrt(deviance(mod2)/df.residual(mod2))
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="Peak",
                          Slope=summary(mod2)$coefficients[2],
                          SE=summary(mod2)$coefficients[4],
                          Tvalue=summary(mod2)$coefficients[6],
                          Pvalue=summary(mod2)$coefficients[8],
                          Rsquare=summary(mod2)$r.squared,
                          AdjRsquare=summary(mod2)$adj.r.squared,
                          Count=sum(df8a$TotalAbundance),
                          n=sum(!is.na(df8a$Peak)),
                          Residual=Residual2)
      df_summary_lm<-bind_rows(df_summary_lm,df_temp)
    }
    
    #plot(mod2)
    
    if(sum(!is.na(df8a$End))<6){
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="End",
                          Slope=NA,
                          SE=NA,
                          Tvalue=NA,
                          Pvalue=NA,
                          Rsquare=NA,
                          AdjRsquare=NA,
                          Count=NA,
                          n=NA,
                          Residual=NA)
    }
    
    else{ 
      
      mod3 <- lm(End ~ Year, data =df8a)
      Residual3 <- sqrt(deviance(mod3)/df.residual(mod3))
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="End",
                          Slope=summary(mod3)$coefficients[2],
                          SE=summary(mod3)$coefficients[4],
                          Tvalue=summary(mod3)$coefficients[6],
                          Pvalue=summary(mod3)$coefficients[8],
                          Rsquare=summary(mod3)$r.squared,
                          AdjRsquare=summary(mod3)$adj.r.squared,
                          Count=sum(df8a$TotalAbundance),
                          n=sum(!is.na(df8a$End)),
                          Residual=Residual3)
      df_summary_lm<-bind_rows(df_summary_lm,df_temp)
    }
    
    if(sum(!is.na(df8a$Duration))<6){
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="Duration",
                          Slope=NA,
                          SE=NA,
                          Tvalue=NA,
                          Pvalue=NA,
                          Rsquare=NA,
                          AdjRsquare=NA,
                          Count=NA,
                          n=NA,
                          Residual=NA)
    }
    
    else{ 
      
      mod4 <- lm(Duration ~ Year, data =df8a)
      Residual4 <- sqrt(deviance(mod4)/df.residual(mod4))
      df_temp<-data.frame(SpeciesID=df8a$SpeciesID[1],
                          Plot=df8a$Plot[1],
                          Pheno_event="Duration",
                          Slope=summary(mod4)$coefficients[2],
                          SE=summary(mod4)$coefficients[4],
                          Tvalue=summary(mod4)$coefficients[6],
                          Pvalue=summary(mod4)$coefficients[8],
                          Rsquare=summary(mod4)$r.squared,
                          AdjRsquare=summary(mod4)$adj.r.squared,
                          Count=sum(df8a$TotalAbundance),
                          n=sum(!is.na(df8a$Duration)),
                          Residual=Residual4)
      df_summary_lm<-bind_rows(df_summary_lm,df_temp)
    }
  }
}
```

The data is checked for significance in the below code (at the 0.05 level). This is to get a feeling of the strength of the temporal trends found. In the summary, a new column called "Significance" is created, indicating if the trend is significant or not.

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

df_model_significance <-
  data.frame(
    SpeciesID = character(),
    Plot = character(),
    Pheno_event = character(),
    Slope = numeric(),
    Pvalue = numeric(),
    AdjRsquare = numeric(),
    Significance = character()
  )

for (species in unique(df_summary_lm$SpeciesID)) {
  print(species)
  df_summary_lm_sub <- subset(df_summary_lm, SpeciesID == species)
  for (plot in unique(df_summary_lm_sub$Plot)) {
    print(plot)
    df_summary_lm_sub2 <- subset(df_summary_lm_sub, Plot == plot)
    for (phenoEvent in unique(df_summary_lm_sub2$Pheno_event)) {
      df_summary_lm_sub3 <-
        subset(df_summary_lm_sub2, Pheno_event == phenoEvent)
      
      Significance_result <- NA
      
      if (df_summary_lm_sub3$Pvalue < 0.05 || df_summary_lm_sub3$Pvalue == 0.05) {
        Significance_result <-
          "Significant"
      } else if (df_summary_lm_sub3$Pvalue > 0.05 && df_summary_lm_sub3$Pvalue < 0.06) {
        Significance_result <-
          "Near_significant"
      } else if (df_summary_lm_sub3$Pvalue > 0.05) {
        Significance_result <-
          "Non-significant"
      } else {
        print("No pvalues")
        Significance_result <- "Not determined"
      }
      
      
      df_temp <-
        data.frame(
          SpeciesID = species,
          Plot = plot,
          Pheno_event = phenoEvent,
          Slope = df_summary_lm_sub3$Slope,
          Pvalue = df_summary_lm_sub3$Pvalue,
          AdjRsquare = df_summary_lm_sub3$AdjRsquare,
          Significance = Significance_result
        )
      
      df_model_significance <- bind_rows(df_model_significance, df_temp)
    }
  }
}
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

df1 <- filter(df_model_significance, Significance == 'Significant') #Number of significant observations
df1a <- filter(df_model_significance, Significance == 'Non-significant') #Number of non-significant observations
df2 <- filter(df1, Slope > 0) #Only 6 of the significant observations are positive
df3 <- filter(df1, Slope < 0) #48 of the significant observations are negative
df3a <- subset(df3, df3$Pheno_event!= "Duration") #Check without duration of activity
```

## Figure on the slopes of temporal linear trends

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

df_summary_lm %>%
  mutate(Order = case_when(
           SpeciesID == "Acari" ~ "Decomposer",
           SpeciesID == "ANMU" ~ "Mixed feeder",
           SpeciesID == "Aphidoidea" ~ "Herbivore",
           SpeciesID == "Chalcidoidea" ~ "Parasitoid",
           SpeciesID == "CHCE" ~ "Mixed feeder",
           SpeciesID == "Coccoidea" ~ "Herbivore",
           SpeciesID == "Collembola" ~ "Decomposer",
           SpeciesID == "Culicidae" ~ "Mixed feeder",
           SpeciesID == "Ichneumonidae" ~ "Parasitoid",
           SpeciesID == "Linyphiidae" ~ "Predator",
           SpeciesID == "Lycosidae" ~ "Predator",
           SpeciesID == "MYSC" ~ "Mixed feeder",
           SpeciesID == "Nymphalidae" ~ "Mixed feeder",
           SpeciesID == "Phoridae" ~ "Mixed feeder",
           SpeciesID == "Thomisidae" ~ "Predator")) -> df_summary_lm

df_summary_lm$Plot[df_summary_lm$Plot == "Art1"] <- "Plot 1" 
df_summary_lm$Plot[df_summary_lm$Plot == "Art2"] <- "Plot 2" 
df_summary_lm$Plot[df_summary_lm$Plot == "Art3"] <- "Plot 3" 
df_summary_lm$Plot[df_summary_lm$Plot == "Art4"] <- "Plot 4" 
df_summary_lm$Plot[df_summary_lm$Plot == "Art5"] <- "Plot 5" 
df_summary_lm$Plot[df_summary_lm$Plot == "Art6"] <- "Plot 6"
df_summary_lm$Plot[df_summary_lm$Plot == "Art7"] <- "Plot 7" 

df_summary_lm$SpeciesID[df_summary_lm$SpeciesID == "CHCE"] <- "Chironomidae"
df_summary_lm$SpeciesID[df_summary_lm$SpeciesID == "ANMU"] <- "Muscidae"
df_summary_lm$SpeciesID[df_summary_lm$SpeciesID == "MYSC"] <- "Sciaridae"

df_summary_lm$Pheno_event <- factor(df_summary_lm$Pheno_event,                 # Relevel group factor
                         levels = c("Onset", "Peak", "End", "Duration"))

df_summary_lm$SpeciesID <- factor(df_summary_lm$SpeciesID,                 # Relevel group factor
                            levels = c("Chironomidae", "Linyphiidae", "Sciaridae", "Lycosidae", "Collembola", "Muscidae", 
                                       "Acari", "Thomisidae", "Culicidae", "Ichneumonidae", "Coccoidea", "Nymphalidae", "Phoridae", "Chalcidoidea", "Aphidoidea"))

df_summary_lm$Plot <- factor(df_summary_lm$Plot,                 # Relevel group factor
                       levels = c("Plot 7", "Plot 6", "Plot 5", "Plot 4", "Plot 3", "Plot 2", "Plot 1"))
```

```{r}
#| echo: false
#| message: false
#| warning: false
#| output: false

df8_Onset<- subset(df_summary_lm,Pheno_event=="Onset")
df8_Peak<- subset(df_summary_lm,Pheno_event=="Peak")
df8_End<- subset(df_summary_lm,Pheno_event=="End")
df8_Duration<- subset(df_summary_lm,Pheno_event=="Duration")
```

```{r fig.height=10,fig.width=7}
#| echo: false
#| message: false
#| warning: false

Peak <- ggplot(df8_Peak, aes(x = Slope, y = Plot, fill = Pvalue < 0.051 | Pvalue == 0.7))+
  xlab("")+
  scale_fill_manual(name = 'Pvalue < 0.05', values = setNames(c('red', 'blue'), c(T,F)))+
  #scale_shape(guide = "none")+
  coord_cartesian(xlim=c(-3,3))+
  geom_crossbar(aes(xmin=Slope-SE, xmax=Slope+SE, y = Plot), alpha = 0.5, linewidth = 0.3, width = 0.6)+
  geom_point(size = 2)+
  facet_grid(SpeciesID ~ ., drop = TRUE, scales = "free_y", space = "free")+
  theme(strip.text.y = element_blank(), panel.background = element_rect(fill = "white"), panel.spacing = unit(.08, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.5), axis.title.y = element_blank(),legend.position="none",
        axis.title.x = element_blank(), plot.margin = unit(c(0.5,0.1,1,1.5), "cm"),
        axis.text = element_text(size = 10))+
  geom_vline(xintercept = 0)

Duration <- ggplot(df8_Duration, aes(x = Slope, y = Plot, fill = Pvalue < 0.051 | Pvalue == 0.5))+
  xlab("")+
  scale_fill_manual(name = 'Pvalue < 0.05', values = setNames(c('red', 'blue'), c(T,F)))+
  #scale_shape(guide = "none")+
  coord_cartesian(xlim=c(-3,3))+
  geom_crossbar(aes(xmin=Slope-SE, xmax=Slope+SE, y = Plot), alpha = 0.5,  linewidth = 0.3, width = 0.6)+
  geom_point(size = 2)+
  facet_grid(SpeciesID ~ ., drop = TRUE, scales = "free_y", space = "free")+
  theme(strip.text.y = element_text(angle = 0), panel.background = element_rect(fill = "white"), panel.spacing = unit(.08, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.5), axis.title.y = element_blank(), 
        axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position="none",
        axis.title.x = element_blank(), plot.margin = unit(c(0.5,0.1,1,0.1), "cm"),
        axis.text = element_text(size = 10))+
  geom_vline(xintercept = 0)


ggarrange(Peak, Duration, labels = c("A) Peak", "B) Duration"), hjust = -0.1, vjust = 0.1, ncol = 2, nrow = 1)+
  theme(plot.margin = margin(0.5,0.5,1,0.1, "cm"))
```

```{r fig.height=10,fig.width=7}
#| echo: false
#| message: false
#| warning: false

Onset <- ggplot(df8_Onset, aes(x = Slope, y = Plot, fill = Pvalue < 0.051 | Pvalue == 0.7))+
  xlab("")+
  scale_fill_manual(name = 'Pvalue < 0.05', values = setNames(c('red', 'blue'), c(T,F)))+
  #scale_shape(guide = "none")+
  coord_cartesian(xlim=c(-3,3))+
  geom_crossbar(aes(xmin=Slope-SE, xmax=Slope+SE, y = Plot), alpha = 0.5, linewidth = 0.3, width = 0.6)+
  geom_point(size = 2)+
  facet_grid(SpeciesID ~ ., drop = TRUE, scales = "free_y", space = "free")+
  theme(strip.text.y = element_blank(), panel.background = element_rect(fill = "white"), panel.spacing = unit(.08, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.5), axis.title.y = element_blank(),legend.position="none",
        axis.title.x = element_blank(), plot.margin = unit(c(0.5,0.1,1,1.5), "cm"),
        axis.text = element_text(size = 10))+
  geom_vline(xintercept = 0)

End <- ggplot(df8_End, aes(x = Slope, y = Plot, fill = Pvalue < 0.051 | Pvalue == 0.5))+
  xlab("")+
  scale_fill_manual(name = 'Pvalue < 0.05', values = setNames(c('red', 'blue'), c(T,F)))+
  #scale_shape(guide = "none")+
  coord_cartesian(xlim=c(-3,3))+
  geom_crossbar(aes(xmin=Slope-SE, xmax=Slope+SE, y = Plot), alpha = 0.5,  linewidth = 0.3, width = 0.6)+
  geom_point(size = 2)+
  facet_grid(SpeciesID ~ ., drop = TRUE, scales = "free_y", space = "free")+
  theme(strip.text.y = element_text(angle = 0), panel.background = element_rect(fill = "white"), panel.spacing = unit(.08, "lines"),
        panel.border = element_rect(color = "black", fill = NA, size = 0.5), axis.title.y = element_blank(), 
        axis.ticks.y = element_blank(), axis.text.y = element_blank(), legend.position="none",
        axis.title.x = element_blank(), plot.margin = unit(c(0.5,0.1,1,0.1), "cm"),
        axis.text = element_text(size = 10))+
  geom_vline(xintercept = 0)


ggarrange(Onset, End, labels = c("C) Onset", "D) End"), hjust = -0.1, vjust = 0.1, ncol = 2, nrow = 1)+
  theme(plot.margin = margin(0.5,0.5,1,0.1, "cm"))
```
